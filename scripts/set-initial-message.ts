import axios from 'axios';
import { config } from 'dotenv';
import { logger } from '../src/utils/logger';

config();

const descriptions = [
    {
        language_code: 'ru', // Russian
        description: `üíº –ë–æ—Ç —Å–∫–∞–Ω–∏—Ä—É–µ—Ç —Å–∞–º—ã–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ —Å–∞–π—Ç—ã —Å –≤–∞–∫–∞–Ω—Å–∏—è–º–∏ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏ –≤ Telegram.\n\nüí≤ –í—ã –ø–æ–ª—É—á–∏—Ç–µ 10 —Ç–µ–ª–µ–≥—Ä–∞–º –∑–≤–µ–∑–¥. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å—Ç–∞—Ä—Ç–æ–≤—ã–π –±—é–¥–∂–µ—Ç, —á—Ç–æ–±—ã –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –±–æ—Ç.\n\nüëâ –ù–∞—Å—Ç—Ä–æ–π—Ç–µ —Ñ–∏–ª—å—Ç—Ä—ã –∏ –Ω–∞—á–Ω–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —É–∂–µ —Å–µ–≥–æ–¥–Ω—è! –ë–æ—Ç –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏ –ø—Ä—è–º–æ –≤ –≤–∞—à Telegram –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –≤–∞–º–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤.\n\n‚è≥ –≠–∫–æ–Ω–æ–º—å—Ç–µ –≤—Ä–µ–º—è –∏ –¥–µ—Ä–∂–∏—Ç–µ —Ä—É–∫—É –Ω–∞ –ø—É–ª—å—Å–µ`
    },
    {
        language_code: 'en', // English
        description: `üíº The bot scans the most popular job websites and sends suitable job offers to Telegram.\n\nüí≤ You will receive 10 Telegram stars. Use the starting budget to test the bot.\n\nüëâ Set up filters and start receiving offers today! The bot will send relevant job offers directly to your Telegram based on the filters you created.\n\n‚è≥ Save time and stay on top of opportunities.`
    }
];

const names = [
    {
        language_code: 'ru', // Russian
        name: "Travelgig –í–∞–∫–∞–Ω—Å–∏–∏ –ë–æ—Ç | –†–∞–±–æ—Ç–∞ –∑–∞ –≥—Ä–∞–Ω–∏—Ü–µ–π | –†a–±–æ—Ç–∞ –≤ –ê–∑–∏–∏"
    },
    {
        language_code: 'en', // English
        name: "Travelgig Jobs Bot | Work Abroad | Work in Asia and Middle East"
    }
];

async function setInitialBotMessage() {
    const token = process.env.BOT_TOKEN;

    if (!token) {
        throw new Error('BOT_TOKEN environment variable is required');
    }

    try {
        for (const { language_code, description } of descriptions) {
            const response = await axios.post(
                `https://api.telegram.org/bot${token}/setMyDescription`,
                {
                    description,
                    language_code
                }
            );

            if (response.data.ok) {
                logger.info(`Initial message set successfully for language: ${language_code}`);
            } else {
                throw new Error(`Failed to set initial message for language: ${language_code}`);
            }
        }


        // Set names
        for (const { language_code, name } of names) {
            const response = await axios.post(
                `https://api.telegram.org/bot${token}/setMyName`,
                {
                    name,
                    language_code
                }
            );

            if (response.data.ok) {
                logger.info(`Name set successfully for language: ${language_code}`);
            } else {
                throw new Error(`Failed to set name for language: ${language_code}`);
            }
        }

    } catch (error) {
        console.log(error)
        logger.error('Error setting bot initial message:', error as Error);
        process.exit(1);
    }
}

setInitialBotMessage();